#!/usr/bin/env kos

import io
import base.*

fun check_line1(result, input)
{
    if input.size == 1 {
        return result == input[0]
    }

    const last = input.pop()

    if result % last == 0 {
        if check_line1(result / last, input) {
            return true
        }
    }

    if check_line1(result - last, input) {
        return true
    }

    input.push(last)
    return false
}

fun check_line2(result, input)
{
    if input.size == 1 {
        return result == input[0]
    }

    const last = input.pop()

    if result % last == 0 {
        if check_line2(result / last, input) {
            return true
        }
    }

    if check_line2(result - last, input) {
        return true
    }

    const result_str = string(result)
    const last_str   = string(last)
    if result_str.ends_with(last_str) {
        for const i in range(last_str.size) {
            result /= 10
        }
        if check_line2(result, input) {
            return true
        }
    }

    input.push(last)
    return false
}

public fun main(_, input_file_name = "input07.txt")
{
    const input = []

    with const file = io.open(input_file_name) {
        for const line in file.read_lines() {
            input.push(line.split() -> map(s => integer(s.strip(":"))) -> array)
        }
    }

    const part1 = input -> filter(i => check_line1(i[0], i[1:])) -> map(first) -> sum
    print("Part 1 answer is \(part1)")

    const part2 = input -> filter(i => check_line2(i[0], i[1:])) -> map(first) -> sum
    print("Part 2 answer is \(part2)")
}

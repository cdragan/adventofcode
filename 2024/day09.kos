#!/usr/bin/env kos

import io
import base.*

fun unpack(layout)
{
    const disk = []

    for const block_id, count_char in enumerate(layout) {
        const count = integer(count_char)
        const value = (block_id & 1) ? void : (block_id >> 1)
        disk.resize(disk.size + count, value)
    }

    return disk
}

fun defrag1(disk)
{
    var left  = 0
    var right = disk.size - 1

    while left < right {
        if disk[left] != void {
            left += 1
        }
        else if disk[right] == void {
            right -= 1
        }
        else {
            disk[left]  = disk[right]
            disk[right] = void
            left  += 1
            right -= 1
        }
    }
}

fun find_space(disk, end, size)
{
    var start      = 0
    var found_size = 0

    for const pos in range(end) {
        if disk[pos] == void {
            found_size += 1
            if found_size >= size {
                return start
            }
        }
        else {
            start      = pos + 1
            found_size = 0
        }
    }

    return end
}

fun defrag2(disk)
{
    var right = disk.size - 1
    var space = 0

    while right > 0 {
        if disk[right] == void {
            right -= 1
            continue
        }

        const block_id = disk[right]
        const end = right + 1
        repeat {
            right -= 1
        } while right >= 0 && disk[right] == block_id

        if right < 0 {
            break
        }

        const begin = right + 1
        const size  = end - begin

        var pos = find_space(disk, begin, size)

        if pos >= begin {
            continue
        }

        # Move file
        for const src in range(begin, end) {
            disk[pos] = disk[src]
            disk[src] = void
            pos += 1
        }
    }
}

fun checksum(disk, size = void)
{
    size = size || disk.size

    fun checksum_step(enums)
    {
        const idx, block_id = enums
        return (block_id != void) ? (idx * block_id) : 0
    }

    return enumerate(disk[:size]) -> map(checksum_step) -> sum
}

public fun main(_, input_file_name = "input09.txt")
{
    var disk_layout = void

    with const file = io.open(input_file_name) {
        disk_layout = string(file.read()).strip()
    }

    const disk_blocks1 = unpack(disk_layout)
    const disk_blocks2 = disk_blocks1[:]

    defrag1(disk_blocks1)

    print("Part 1 answer is \(checksum(disk_blocks1))")

    defrag2(disk_blocks2)

    print("Part 1 answer is \(checksum(disk_blocks2))")
}
